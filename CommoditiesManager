using System;
using System.Threading;
using System.Threading.Tasks;

namespace Tyler_sMultithreadingTestApp
{
    class CommoditiesManager
    {
        private readonly CashFlowManager _cashFlowManager;
        private readonly CommoditiesMarket _market;

        public CommoditiesManager(CashFlowManager cashFlowManager, CommoditiesMarket market)
        {
            _cashFlowManager = cashFlowManager;
            _market = market;
        }

        public void Start()
        {
            //CommoditiesMarket market = new CommoditiesMarket(_cashFlowManager, _cashFlowManager.AvailableFunds);

            while (true)
            {
                //Console.WriteLine("im working");
                if (_market.CurrentPrice > 50)
                {
                    SellAlgorithm(_market);
                }

                if (_market.CurrentPrice < 50)
                {
                    BuyAlgorithm(_market);
                }

                Thread.Sleep(1000);
            }
        }

        public void BuyAlgorithm(CommoditiesMarket market)
        {
            // Check if there are funds available to buy commodities
            if (_cashFlowManager.AvailableFunds >= market.CurrentPrice)
            {
                int amountToBuy = 1; // Buying only 1 commodity for simplicity
                market.BuyCommodities(amountToBuy, market.CurrentPrice);
                Console.WriteLine($"Bought {amountToBuy} commodity for {market.CurrentPrice}. Current funds: {_cashFlowManager.AvailableFunds}, Current commodities: {_cashFlowManager.OwnedCommodities}");

            }
        }

        public void SellAlgorithm(CommoditiesMarket market)
        {
            // Check if there are commodities to sell
            if (_cashFlowManager.OwnedCommodities > 0)
            {
                int amountToSell = 1;
                market.SellCommodities(amountToSell, market.CurrentPrice);
                Console.WriteLine($"Sold {amountToSell} commodities for {market.CurrentPrice}. Current funds: {_cashFlowManager.AvailableFunds}, Current commodities: {_cashFlowManager.OwnedCommodities}");
            }
        }
    }
}
